void addToBTree(struct BTreeNode *btree, char *word) {
    // printf("%d\n", strcmp(btree -> word, ""));
    char p1[MAX_WORD_SIZE], p2[MAX_WORD_SIZE];
    strcpy(p1, btree -> word);
    strcpy(p2, word);
    int compare = strcmp(btree -> word, word);
    if (strcmp(btree -> word, "") == 0) {
        // printf("COMPARE: %s - %s = %d\n", p1, p2, compare);
        strcpy(btree -> word, word);
        btree -> occurrences = 1;
        btree -> left = NULL;
        btree -> right = NULL;
        // printf("WORD: %s", btree -> word);
        return;
    }
    while (1) {
        compare = strcmp(btree -> word, word);
        strcpy(p1, btree -> word);
        strcpy(p2, word);
        // printf("COMPARE: %s - %s = %d\n", p1, p2, compare);
        if (compare == 0) {
            // printf("UGUALI\n");
            btree -> occurrences += 1;
            // printf("[UGUALE] Aggiunto %s", word);
            // printf("OCCURRENCES: %ld\n", btree -> occurrences);
            return;
        } if (compare < 0) {
            // printf("MINORE\n");
            if (btree -> left != NULL) {
                // printf("VADO A SINISTRA\n");
                btree = btree -> left;
            } else {
                // printf("WORD: %s", btree -> left -> word);
                btree -> left = newBTree(NULL, NULL, word, 1);
                // printf("[MINORE] Aggiunto %s", word);
                return;
                // printf("WORD: %s", btree -> left -> word);
                // VADO NEL SOTTOALBERO DI SINISTRA
            }
        } else {
            // printf("MAGGIORE\n");
            if (btree -> right != NULL) {
                // printf("VADO A DESTRA\n");
                btree = btree -> right;
            } else {
                // printf("[MAGGIORE] Aggiunto %s", word);
                btree -> right = newBTree(NULL, NULL, word, 1);
                return;
            }
            // VADO NEL SOTTOALBERO DI DESTRA
        }
    }
}

void preOrder(struct BTreeNode *rootNode) {
    if(rootNode != NULL) {
        printf("%s: %ld\n", rootNode -> word, rootNode -> occurrences);
        preOrder(rootNode -> left);
        preOrder(rootNode -> right);
    }
}

void inOrder(struct BTreeNode *rootNode, int rank){
    if (rootNode != NULL) {
        inOrder(rootNode -> left, rank);
        printf("[%d] %s: %ld\n", rank, rootNode -> word, rootNode -> occurrences);
        inOrder(rootNode -> right, rank);
    }
}

void printHeap(Item *heap, long size) {
    int i = 0;
    for (i = 0; i <= size; i++) {
        sprintf(message, "%s: %ld\n", heap[i].word, heap[i].occurrences);
        logMessage(message, rank);
    }
    strcpy(message, "=== END\n");
    logMessage(message, rank);
}

void byLevel(struct BTreeNode *t, rank) {
    int maxNodes = 10000;
    struct BTreeNode *nodesToPrint[maxNodes];
    int actualIndex = 0;
    int lastIndex = 1;
    int maximumIndex = 1;
    if (t == NULL) return;
    nodesToPrint[actualIndex] = t;
    for (actualIndex = 0; actualIndex < maximumIndex; actualIndex++) {
        struct BTreeNode *currentNode = nodesToPrint[actualIndex];
        sprintf(message, "%s: %ld\n", currentNode -> word, currentNode -> occurrences);
        logMessage(message, rank);
        if (currentNode -> left != NULL) {
            nodesToPrint[lastIndex++] = currentNode -> left;
            maximumIndex++;
        }
        if (currentNode -> right != NULL) {
            nodesToPrint[lastIndex++] = currentNode -> right;
            maximumIndex++;
        }
    }
}